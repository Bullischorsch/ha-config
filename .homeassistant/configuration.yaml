# This file contains example config entries for the provided custom components

# Configuration for the BLNET component
blnet:
  # Host address of your blnet
  resource: http://192.168.255.255
  # Poll interval in seconds (Optional, Default: 360)
  scan_interval: 360
  # Expert access password of the web-interface (Optional, Default: None)
  password: 1234
  # Enable BLNet-Direct access (Experimental, Optional, Default: False)
  use_ta: true
  # BLNet-Direct port (Optional, Default: 4000)
  ta_port: 4000
  # Enable Web interface access (Optional, Default: True)
  # When set to false, switches are configured as sensors
  use_web: true
  # Webinterface port (Optional, Default: 80)
  web_port: 80
  # Can-Node to be used (Optional, Default: None - don't change the current setting at the BLNET)
  can_node: 20

sensors:
  # Database size
  # might be that this is copied from somewhere, don't remember the source
  - platform: command_line
    name: "Database size"
    command: "stat --printf='%s' /home/homeassistant/.homeassistant/home-assistant_v2.db"
    unit_of_measurement: 'MB'
    value_template: '{{ ((value | int) / 1000000) | round(3)}}'
    scan_interval: 86400

  # Fronius Net integration
  - platform: fronius_symo
    resource: http://192.168.255.255
    name: "Fronius Symo"
    scan_interval: 180
    #hidden: true

  # Fronius Solar Inverter integration
  - platform: fronius_symo_solar
    resource: http://192.168.255.255
    scan_interval: 180

  # ALternative: Fronius integration via official component
  - platform: fronius
    resource: http://192.168.255.255
    monitored_conditions:
      - sensor_type: power_flow
      - sensor_type: inverter

  # Mock relative self consumption and relative autonomy that is usually provided by fronius_symo
  - platform: template
    sensors:
        relative_self_consumption_fronius_power_flow_0_http_192_168_255_255:
            value_template: >-
              {% set pv = states.sensor.power_photovoltaics_fronius_power_flow_0_http_192_168_255_255 %}
              {% set load = states.sensor.power_load_fronius_power_flow_0_http_192_168_255_255 %}
              {% if load and pv and pv.state %}
               {{
                  [[
                   0,
                   -float(load.state) * 100 / float(pv.state)
                  ]
                  | max, 100] | min | round(2)
               }}
              {% else %}
                100
              {% endif %}
            friendly_name: "Relative self consumption Fronius power flow"
            unit_of_measurement: '%'
            entity_id: sensor.power_load_fronius_power_flow_0_http_192_168_255_255
        relative_autonomy_fronius_power_flow_0_http_192_168_255_255:
            value_template: >-
              {% set pv = states.sensor.power_photovoltaics_fronius_power_flow_0_http_192_168_255_255 %}
              {% set load = states.sensor.power_load_fronius_power_flow_0_http_192_168_255_255 %}
              {% if pv and load and load.state %}
               {{
                  [
                   100,
                   -float(pv.state) * 100 / float(load.state)
                  ]
                  | min | round(2)
               }}
              {% else %}
                100
              {% endif %}
            friendly_name: "Relative autonomy Fronius power flow"
            unit_of_measurement: '%'
            entity_id: sensor.power_load_fronius_power_flow_0_http_192_168_255_255

